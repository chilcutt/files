#!/usr/bin/env ruby

require 'open3'

##################################################
# prettier-ignore-start

ENABLED_LINTERS = [
  Rubocop,
  Prettier,
  ESLint,
]
Runner.perform

# prettier-ignore-end
##################################################

Result = Struct.new(:success, :errors)

class Runner
  def self.perform
    out, status =
      Open3.capture2e(
        "git diff --cached --name-only --diff-filter=ACM -- '*.rb' '*.js' '*.jsx' '*.ts'",
      )

    raise 'Unable to retrieve git status.' unless status.success?

    filenames = out.split("\n")

    exit(0) if filenames.empty?

    results =
      ENABLED_LINTERS.each_with_object({}) do |engine, results|
        puts "Checking #{engine.to_s}..."
        results[engine.to_s] = engine.perform(filenames)
      end

    if results.any?
      puts
      errors.each do |type, messages|
        puts('=' * 50)
        puts red("#{type} errors:")
        puts messages
        puts('=' * 50)
        puts
      end
      exit(1)
    end

    exit(0)
  end

  private_class_method def self.red(string)
    "\e[31m#{string}\e[0m"
  end
end

class Rubocop
  def self.perform(filenames)
    target_filenames = filenames.select { |f| f.match(/.rb$/) }

    return Result.new(success: true, errors: []) if target_filenames.empty?

    output, status =
      Open3.capture2e(
        "rubocop --format simple --fail-level autocorrect --auto-correct #{
          target_filenames.join(' ')
        }",
      )

    Result.new(success: status.success?, errors: output)
  end
end

class Prettier
  def self.perform(filenames)
    target_filenames = filenames.select { |f| f.match(/.(?:rb|js|jsx|ts)$/) }

    return Result.new(success: true, errors: []) if target_filenames.empty?

    output, status =
      Open3.capture2e(
        "yarn run --silent prettier --list-different --write #{
          target_filenames.join(' ')
        }",
      )

    Result.new(success: status.success?, errors: output)
  end
end

class ESLint
  def self.perform(filenames)
    target_filenames = filenames.select { |f| f.match(/.(?:rb|js|jsx|ts)$/) }

    return Result.new(success: true, errors: []) if target_filenames.empty?

    targets = target_filenames.join(' ')

    output, status = Open3.capture2e("yarn run --silent eslint #{targets}")

    system("yarn run --silent eslint --fix #{targets}") unless status.success?

    Result.new(success: status.success?, errors: output)
  end
end
