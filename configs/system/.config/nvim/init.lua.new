-- Install packer
local install_path = vim.fn.stdpath("data") .. "/site/pack/packer/start/packer.nvim"
local is_bootstrap = false
if vim.fn.empty(vim.fn.glob(install_path)) > 0 then
  is_bootstrap = true
  -- Waiting for https://github.com/wbthomason/packer.nvim/pull/1057
  -- vim.fn.execute("!git clone https://github.com/wbthomason/packer.nvim " .. install_path)
  vim.fn.execute("!git clone https://github.com/stevearc/packer.nvim --branch stevearc-git-env " .. install_path)
  vim.cmd([[packadd packer.nvim]])
end

require('packer').startup({function(use)
  use { 'stevearc/packer.nvim', branch = 'stevearc-git-env' }                     -- Package manager
  use { 'benmills/vimux' } -- integrate vim with tmux

  if is_bootstrap then
    require('packer').sync()
  end
end, config = {
  git = {
    env = {
      -- This is required to make git operations work on remote devboxes
      GIT_CONFIG_NOSYSTEM = "1"
    }
  }
}})

-- When we are bootstrapping a configuration, it doesn't
-- make sense to execute the rest of the init.lua.
--
-- Restart nvim, and then it will work.
if is_bootstrap then
  print("==================================")
  print("    Plugins are being installed")
  print("    Wait until Packer completes,")
  print("       then restart nvim")
  print("==================================")
  return
end

-- Automatically source and re-compile packer whenever you save this init.lua
local packer_group = vim.api.nvim_create_augroup("Packer", { clear = true })
vim.api.nvim_create_autocmd("BufWritePost", {
  command = "source <afile> | PackerCompile",
  group = packer_group,
  pattern = vim.fn.expand("$MYVIMRC"),
})
