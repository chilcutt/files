set nocompatible
filetype plugin indent on
syntax enable

call plug#begin('~/.vim/plugged')
Plug 'airblade/vim-gitgutter'
Plug 'altercation/vim-colors-solarized'
Plug 'benmills/vimux'
Plug 'docunext/closetag.vim' " close HTML tags
Plug 'jremmen/vim-ripgrep'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'majutsushi/tagbar' " fzf?
Plug 'maxmellon/vim-jsx-pretty'
Plug 'pangloss/vim-javascript'
Plug 'prettier/vim-prettier'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/syntastic' " TODO - ALE
Plug 'sheerun/vim-polyglot' " highlighting and indentation
Plug 'tommcdo/vim-lion'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-fugitive' " git integration
Plug 'tpope/vim-rails'
Plug 'tpope/vim-rake'
Plug 'tpope/vim-rhubarb' " github integration
Plug 'tpope/vim-surround' " surrounding movement
Plug 'vim-scripts/ZoomWin' " ctrl+w o to zoom
Plug 'vim-scripts/matchit.zip'
Plug 'w0rp/ale'
call plug#end()

set autoindent
set background=dark
set backspace=indent,eol,start
set cmdheight=2
set complete-=i
set display+=lastline " show as much of lines as possible instead of @
set expandtab
set hidden
set hlsearch
set ignorecase
set laststatus=2 " always show the statusline
set lazyredraw " redraw less often
set list " show whitespace
set listchars=tab:>\ ,trail:\.,extends:>,precedes:<,nbsp:+ " show whitespace
set nowrap
set nrformats-=octal " remove octal from defaults, ctrl+a to add
set number
set shiftwidth=2
set signcolumn=yes " always show the signcolumn so it doesn't move when activated, vim-gitgutter & ale
set smartcase
set smarttab
set softtabstop=2
set statusline+=%F " display the filename in the statusline
set t_Co=16 " match bright colors without forcing bold
set tabstop=2
set ttyfast " fast terminal, send characters quickly
set updatetime=100 " write swp faster, to trigger faster git status reaction, vim-gitgutter
set wildmenu " tab completion

let g:html_indent_script1 = "auto"
let g:html_indent_style1 = "auto"

colorscheme solarized

highlight Visual term=reverse cterm=reverse guibg=LightGrey
highlight ColorColumn ctermbg=magenta
call matchadd('ColorColumn', '\%81v', 100)

" highlight all tabs in red
autocmd ColorScheme * highlight AllTabs ctermbg=red guibg=red
highlight AllTabs ctermbg=red guibg=red
match AllTabs /\t/

" highlight trailing whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_mode_map = { "mode": "active", "passive_filetypes": ["html"] } " disable syntax checking for html files, does not work well with components

"" ctrlp
"let g:ctrlp_use_caching = 0
"if executable('ag')
"  set grepprg=ag\ --nogroup\ --nocolor
"  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
"else
"  let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']
"  let g:ctrlp_prompt_mappings = { 'AcceptSelection("e")': ['<space>', '<cr>', '<2-LeftMouse>'] }
"endif
"let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git' " ignore generate files when searching

"set grepprg=rg\ --vimgrep

let g:fzf_layout = { 'down': '~20%' }

" use fzf and rg for advanced find
command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)

" don't move on split
nnoremap <C-w>s Hmx`` \|:split<cr>`xzt``
nnoremap <C-w>v Hmx`` \|:vsplit<cr>`xzt``

" always show bookmarks
let NERDTreeShowBookmarks=1
let g:tagbar_left = 1 " open tagbar on the left
let g:tagbar_autoclose = 1 " close tagbar after selection
let g:tagbar_autofocus = 1 " focus when opened
let g:VimuxHeight = "25" "set vimux terminal height

let mapleader = "\<Space>" " set leader to spacebar
nmap <leader>w :w<cr>
nmap <leader>q :q<cr>
nmap <leader>x :x<cr>
nmap <leader><space> <C-w><C-w>
nmap <leader>h <C-w>h
nmap <leader>j <C-w>j
nmap <leader>k <C-w>k
nmap <leader>l <C-w>l
nmap <leader>v :vsp<cr><C-w>l
nmap <leader>s :sp<cr><C-w>j
nmap <leader>r :NERDTreeFind<cr>
nmap <leader>d :NERDTreeToggle<cr>
" nmap <c-t> :TagbarToggle<cr>
nmap <leader>n :n<cr>
nmap <leader>N :N<cr>
nmap <leader>t :tabnew<cr>
nmap <leader>f :Find<space>
nmap <leader>gs :GitGutterToggle<cr>
nmap <leader>gb :Gblame<cr>
nmap <leader>gw :Gbrowse<cr> " open file in browser at Github
xmap <leader>gw :Gbrowse<cr> " highlight lines
nmap <leader>g :Rg<space>
nmap <leader>rf :call VimuxRunCommand("spring rspec " . bufname("%"))<cr>
nmap <leader>rs :call VimuxRunCommand("spring rspec " . bufname("%") . ":" . line("."))<cr>
nmap <leader>rbf :call VimuxRunCommand("bundle exec rspec " . bufname("%"))<cr>
nmap <leader>rbs :call VimuxRunCommand("bundle exec rspec " . bufname("%") . ":" . line("."))<cr>
nmap <leader>rj :call VimuxRunCommand("yarn run jest " . bufname("%"))<cr>
nmap <leader>bb :VimuxCloseRunner<cr>
nmap <leader>bc :VimuxPromptCommand<cr>
nmap <leader>br :VimuxRunLastCommand<cr>
nmap <leader>o o<esc>
nmap <leader>O O<esc>
nmap <leader>y "+y
nmap <leader>p "+p
nmap <leader>a :A<cr>
nmap <silent> <leader>y :w !pbcopy<cr><cr>
vmap <silent> <leader>y :w !pbcopy<cr><cr>
xmap <leader>/ <Plug>Commentary<cr>
nmap <leader>/ <Plug>CommentaryLine<cr>
inoremap jk <esc> " set jk to escape to normal mode
nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L> " clear hlsearch with ctrl+l
nnoremap <silent> <C-P> :Files<cr>
nmap <leader>cn :cnext<cr>
nmap <leader>cp :cprevious<cr>
nmap <leader>ln :ALENext<cr>
nmap <leader>lp :ALEPrevious<cr>

autocmd BufNewFile,BufRead *.es6 set filetype=javascript

let g:vim_json_syntax_conceal = 0 " don't do weird shit in json files

let g:jsx_ext_required = 0 " handle jsx in js files

" ripgrep configuration
let g:rg_highlight=1

let g:polyglot_disabled = ['graphql']

" vim-gitgutter
let g:gitgutter_enabled = 0 " disable by default

" vim-jsx-pretty
let g:vim_jsx_pretty_colorful_config = 1

" vim-lion
let b:lion_squeeze_spaces = 1 " eliminate excess preceeding spaces

" ale
let g:ale_completion_enabled = 1
"let g:ale_lint_on_save = 1
"let g:ale_lint_on_text_changed = 0
"let g:ale_lint_on_text_changed = 'never'
"let g:ale_open_list = 1
